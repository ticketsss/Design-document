
                   数据库课程设计报告
　　　　　　　　　　　　　　　　　　　

　　　　　　　　　　　　　　
　　　　　　　　　　　　　　
　　　　　　　　　　　　　　　　　　　
题　　目:   汽车售票管理系统 
　　　　　　
　　　　　　组    长：  罗彬彬   学    号： 1108060075 
　　　　　　学生姓名：  李康     学    号： 1108060087 
　　　　　　学生姓名：  罗佳     学    号： 1108060061 
　　　　　　学生姓名：  吴意     学    号： 1108060016
　　　　　　
　　　　　　院　　系：　　   计算机科学与信息学院　      
　　　　　　专业年级：　     软件工程　　2011   级       










引言
1.1编写目的
　　　详细设计说明书的编写是软件开发过程重要的一部分，其目的是为了使开发人员在完成概要设计说明书的基础上完成概要设计规定的各个功能块的具体实现的设计工作。通过对所产生的功能模块进行过程描述，开发一个可以直接转化成程序语言的软件标识，这样可以使软件设计人员很好的了解软件的功能，并对软件的所有模块有一个更深的了解。本说明书在概要设计的基础上，对车站售票管理系统的各模块，程序，子系统分别进行了实现层面上的要求和说明，为进行后面的实现和测试做准备，检验本系统的各项性能指标，及时发现纰漏及时修补。
　　　本系统设计主要是根据汽车站售票业务的基本流程，系统包含售票子系统、订票子系统、查询子系统以及汽车时刻表等几个方面。
　　　
　　　系统主要功能：汽车售票管理系统主要包括系统主窗口、登陆窗口、售票管理窗口、订票管理窗口、查询窗口、系统维护窗口、用户管理窗口等，主要功能又订票、退票、订票信息查询、车此信息查询、当日收入统计、打印报表输出等。
　　　主要读者：程序员、项目总监、测试人员

1.2定义
SqlClien：包含有关专门操作SqlServer数据库的类,包含的是一些数据库操作所需要用到的普通数据，如数据表，数据行等

时序图：亦称为序列图或循序图，是一种UML行为图。它通过描述对象之间发送消息的时间顺序显示多个对象之间的动态协作。它可以表示用例的行为顺序，当执行一个用例行为时，时序图中的每条消息对应了一个类操作或状态机中引起转换的触发事件包：多个类的集合

1.4参考资料
《软件工程》
汽车售票管理系统需求报告

总体设计
2.1需求概述
    本汽车售票系统主要为了提高售票效率，方便乘客购票设计的，包括售票，订票、退票，查询，统计，为了保证系统正常运行，另外需要专门人员对系统的维护管理。
登录：登录可分为系统管理员登录和财务管理员登录，在登录模块的描述中，将系统管理员和财务管理员都看作这个系统的用户，需要根据自己的登录名和密码登录系统，才可进行以后的操作。若用户名和密码输入错误，不匹配，系统将会提示输入错误。若用户名和密码不正确，用户可已重新输入，但只允许输入三次。
查询：查询分为车次查询、站点查询、时刻表查询、票价查询、余票查询。车次查询提供了所有车次浏览、按车次查询、和站站查询，用户可以通过查询来了解列车所经车站以及发车时间等信息。时刻表查询可以查询每一车次在每一站的发车时间和到站时间。票价查询可以让用户按自己的需求来查询所有车次的车票价格；余票查询可以查询到所有车次的剩余车票的情况；
售票：根据顾客的需求如发车日期、发车时间、汽车类型等选择顾客所需要的车次，然后结算并打印车票给顾客。
退票：处理顾客由于某种情况需要退回车票的情况，顾客要在车站指定的时间内进行退票，此外车站售票点还要扣除一定的手续费。
统计：售票统计分别可以按日期统计、按车次统计、按客流方向统计等统计方式，通过察看车票的流向可以得知顾客的大致流向，列车管理人员可以根据客流的流向随时调整列车运行车次，达到列车的合理调度，使列车最大限度的投入使用中，实现资源的合理利用。
修改：包括车次修改、票价修改、站点修改。车次修改包括增加车次，减少车次，车次的临时调度和由于自然灾害造成的临时路线更改。票价修改为节假日、春运等特殊时段或某些特殊地域需要适量增加或减少票价，具体数字有铁路管理定。站点修改可使某些车次增加或减少一些站点。
系统管理维护：系统管理员通过维护数据库及修改车次增加或减少一些站点等，保证系统正确运行

2.2软件结构

汽车售票系统功能层次图
1.主要功能：完善汽车票售票系统，方便汽车站售票工作，提高服务质量和服务效率。
2.性能要求：汽车站提供的信息必须及时的反映在汽车站售票系统平台上。售票系统的定单必须无差错的存储在汽车站的主服务器上。对服务器上的数据必须进行及时正确的刷新。
3.输入要求：数据完整，详实。
4.输出要求：简捷，快速，实时。
5.安全与保密要求：系统管理员享有对汽车站票务信息数据库、汽车信息数据库的管理与修改。顾客和售票员不用登录可以直接进行购票，修改车票等操作。
程序描述
　　　通过需求分析和概要设计报告分析，可以知道用户用（普通用户、售票人员、管理人员）该系统后，根据自己的需求进行选择不同的功能，然后进入相应的操作交互链。顾客向售票员提出请求，顾客有请求购票、请求查询、请求订票、请求退票和请求改签这几个功能。售票员通过与顾客交流后了解顾客的请求信息，进入系统进行操作。售票员和管理员
均需要对车票进行操作，同时，管理员需要对系统进行维护。

　　　由于本系统中售票人员员和顾客是主要的操作者，因此需要明确售票员的状态。
　　　
售票员和顾客状态图
3.1登录模块
3.1.1功能

管理员登录时序图
　　登录可分为系统管理员登录和财务管理员登录，在登录模块的描述中，将系统管理员和财务管理员都看作这个系统的用户，他们根据自己的登录名和密码登录系统，才可进行以后的操作。若用户名和密码输入错误，不匹配，系统将会提示输入错误。若用户名和密码不正确，用户可已重新输入，但只允许输入三次。
3.1.2性能
　　　用户通过用户名和密码进入系统，可以确保系统的安全，由于系统管理员和财务管理员具有不同的权限，因此可以确保系统的权限分明。
3.1.2算法
　　　该模块通过访问数据库查询用户登录信息，提取用户输入的用户名和密码，封装成SELECT语句，到数据库中查询相关信息，将信息返回到用户界面。若用户输入错误，弹出错误提示框。


3.2查询模块
3.2.1功能

查询时序图
　　　查询可分为按车次查询与站点查询，顾客通过输入待查询车次或者站点查询车票的相关信息，包括票价，时刻，剩余票数等信息。若用户输入的车次或者站点错误，系统会提示输入错误。
3.2.2性能
　　　能够对乘客要求的大部分查询类型都能够查询，每个查询功能键都一目了然，能快速精确的显示要查询的信息。要求单次的查询系统的处理时间在2秒以内。
3.2.3算法
　　　该模块通过访问数据库查询车票信息，提取用户输入的车次或者站名，封装成SELECT语句，到数据库中查询车票信息，将信息返回到用户界面。若用户输入错误，弹出错误提示框。

3.3售票模块
3.3.1功能

售票时序图
　　　根据顾客的需求如发车日期、发车时间、车票类型等，售票员查询相关的车票信息，选择顾客所需要的车次，然后结算并打印车票给顾客。
3.3.2性能
　　　查询车票精确，单次售票任务需要在25秒之内完成，系统的反应时间要求在3秒之内；保证36台机器同时运行该系统不会有过高延时。

3.3.3算法
　　　售票员输入顾客预购车票的相关信息，到数据库中查询是否有票，若有则打印车票给顾客，数据库中改车次车票自动减去卖出的票数；若无则提示售票员车票已售完。

3.4退票模块
3.4.1功能
　　
　　退票时序图
　　　处理用户由于某种情况需要退回车票的情况，顾客要在车站指定的时间内进行退票，按照票款的80%退款。超过指定时间，只能改签，不能退票。

3.4.2性能
　　　及时的记录下所退回的车票，并快速精确的显示应交付给顾客的余额。

3.4.3算法
　　　售票员扫描顾客欲退车票的，获得车票编号，售票员点击退票按钮，将车票编号交给退票控制器。退票控制器到数据库中查询此票是否已售出，若匹配则点击确认退票，退票控制器会自动修改数据库，售票员返还退票款；若不匹配则会提示售票员此票未售出。

3.5修改车票
3.5.1功能
　　
　　修改车票时序图
　　　顾客计划临时变更需要更改出发日期，或者退票不成功，可以选择修改服务。售票员收回乘客车票，返还票款，收取手续费。若乘客需要日期的票有剩余，则重新卖给乘客一张票；若票已售完，则退出。
3.5.2性能
　　　保证数据库的一致，具有一定的及时更新能力。

3.5.3算法
　　　售票员扫描车票，输入到改签界面，控制器进入数据库中确认该车票确实售出。若确实售出，则返还退票款，并根据乘客需求另售一张指定日期车票；若没有售出，警告提示售票员。
3.6系统管理维护
3.6.1功能
　　　要求较高安全性与可靠性，查票销售管理系统涉及数据库以及局域网，数据庞大，对数据要求高。因此需要专门的人员进行维护与管理。该模块实现管理员对系统数据库的维护，以及对数据库的定期备份等。

3.6.2性能
　　　日志文件、备份文件、添加成功提示、删除成功提示

3.6.3算法
　　　管理员输入欲修改的车票信息，控制器提取数据，进入数据库修改信息，返回修改成功界面。




　　　
四．数据库设计
 数据库系统中关系的叙述：
 系统的用户有管理员、售票人员、财务管理员、普通顾客，系统用户有对售票人员、财务管理人员的信息进行维护（比如说增加、删除、修改、），普通用户则是经过自己注册后产生
  
1.经分析，可得E-R图：








关系模型(其中有下划线的属性列为主码)：
User员工表（编号Uno，姓名Uname，密码Password，身份Useridentity）
Coach车表（编号Cno，型号Ctype，车牌号Coachnumber，座位数量Chold）
Line线路表（编号Lno，起始站Ldepart，终点站Larrvial）
Tciket票表（编号Tno，线路编号Lno，汽车编号Cno，价格Tpeice，已售票数Tsold，剩余票数Tlast，出发日期Tdate，出发时间Ttime）
Purchase购买关系表（车票编号Tno，购买日期Ptime，预订或购买ReserveORBuy，座位号Seat）
City站点表（编号Cityno，名称Cityname）
3.表：
（1）User员工表数据字典
属性名	存储代码	类型	长度	备注
人员编号	Uno	int	4	主码
姓名	Uname	char	20	唯一
密码	Password	char	20	
身份	Useridentity	char	20	
          







建表代码：
create table Usr
(
  Uno char(4) primary key ,
  Uname char(20) unique  not null,
  Upassword char(20) not null,
  Uidentity char(20) not null,
);

（2）Coach车表数据字典
属性名	存储代码	类型	长度	备注
汽车编号	Cno	Int	4	主码
型号	Ctype	char	20	
车牌号	Coachnumber	char	20	唯一
座位数	Chold	smallint	2	








建表代码：
create table Coach
(
  Cno int primary key,
  Ctype char(20)not null ,
  Cnumber char(20) unique not null,
  Chold smallint not null,
);



3.Line线路表数据字典
属性名	存储代码	类型	长度	备注
路线编号	Lno	int	4	主码
起始站	Ldepart	char	20	
终点站	Larrival	char	20	







建表代码：
create table Line
(
  Lno int primary key,
  Ldepart char(20) not null,
  Larrival char(20) not null,
  
);






4.Ticket票表数据字典
属性名	存储代码	类型	长度	备注
车票编号	Tno	int	4	主码
线路编号	Lno	int	4	外码
汽车编号	Cno	int	4	外码
出发日期	Tdate	datetime	8	
出发时间	Ttime	datetime	8	
票价	Tprice	int	4	
已售票数	Tsold	Int	4	
余票数目	Tlast	int	4	




建表代码：
create table Ticket
(
  Tno int primary key,
  Lno int not null,
  Cno int not null,
  Tdate datetime not null,
  Ttime datetime not null,
  Tprice int not null,
  Tsold int not null,
  Tlast int not null,
  foreign key(Lno) references  Line(Lno),
  foreign key(Cno) references  Coach(Cno),
  
);











5.Purchase购买关系表数据字典
属性名	存储代码	类型	长度	备注
车票编号	Tno	int	4	主码
购买日期	Ptime	datetime	8	
购买或预订	ReserveORBuy	Char	10	
座位号	Seat	smallint	2	









建表代码：
create table Purchase
(
  Tno int,
  Ptime datetime not null,
  RserveORBuy char(10) not null,
  Seat smallint,
  primary key(Tno,Seat),
  foreign key(Tno) references  Ticket(Tno),
  
  
);





City站点表数据字典
属性名	存储代码	类型	长度	备注
站点编号	Cityno	int	4	主码
站点名称	Cityname	Char	20	






建表代码：
create table City
(
  Cityno int primary key,
  Cityname char(20) not null,
  
);

